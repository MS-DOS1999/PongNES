;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMI_flag
	.export		_Frame_Count
	.export		_index
	.export		_index4
	.export		_X1
	.export		_Y1
	.export		_X2
	.export		_Y2
	.export		_XBall
	.export		_YBall
	.export		_speedBallX
	.export		_speedBallY
	.export		_directionBallY
	.export		_directionBallX
	.export		_scoreP1
	.export		_scoreP2CMP
	.export		_speedUpCounter
	.export		_song
	.export		_joypad1
	.export		_joypad1old
	.export		_joypad1test
	.export		_joypad2
	.export		_joypad2old
	.export		_joypad2test
	.export		_new_background
	.export		_textInc
	.export		_textSwitch
	.export		_SPRITES
	.export		_All_Off
	.export		_All_On
	.export		_Reset_Scroll
	.export		_Draw_Background
	.export		_TitleScreen
	.export		_SelectMode
	.export		_update_PaddleSprites
	.export		_update_BallSprites
	.export		_StartInit
	.export		_collisionCheck
	.export		_speedUpBall
	.export		_movePaddle
	.export		_collBKGandSCORE
	.export		_collSPRITES
	.export		_initGAME
	.import		_Play_Fx
	.import		_Reset_Music
	.import		_Play_Music
	.import		_Music_Update
	.import		_Wait_Vblank
	.import		_UnRLE
	.import		_Get_Input
	.export		_MapTitleScreen
	.export		_TablePong
	.export		_BlackScreen
	.export		_PaletteTitleScreen
	.export		_DATE
	.export		_NAME
	.export		_SELECT1P
	.export		_SELECT2P
	.export		_SCOREP1
	.export		_SCOREP2
	.export		_SCORECMP
	.export		_SCORESTRING
	.export		_WINSP1
	.export		_WINSP2
	.export		_WINSCMP
	.export		_MetaSprite1_Y
	.export		_MetaSprite1_X
	.export		_MetaSprite1_Tile
	.export		_MetaSprite1_Attrib
	.export		_MetaSprite2_Y
	.export		_MetaSprite2_X
	.export		_MetaSprite2_Tile
	.export		_MetaSprite2_Attrib
	.export		_MetaSprite3_Y
	.export		_MetaSprite3_X
	.export		_MetaSprite3_Tile
	.export		_MetaSprite3_Attrib
	.export		_main

.segment	"RODATA"

_MapTitleScreen:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C9
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$8E
	.byte	$8F
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$9F
	.byte	$A0
	.byte	$A1
	.byte	$96
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$B4
	.byte	$B2
	.byte	$B5
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$C0
	.byte	$C1
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$C6
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$00
	.byte	$01
	.byte	$36
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$E0
	.byte	$E1
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$E2
	.byte	$E3
	.byte	$E4
	.byte	$E5
	.byte	$E6
	.byte	$E7
	.byte	$E8
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$00
_TablePong:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$0C
	.byte	$0E
	.byte	$01
	.byte	$1B
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$0E
	.byte	$01
	.byte	$1B
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$5F
	.byte	$00
	.byte	$01
	.byte	$00
_BlackScreen:
	.byte	$00
	.byte	$FF
	.byte	$00
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$C1
	.byte	$FF
	.byte	$00
	.byte	$00
_PaletteTitleScreen:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$03
	.byte	$1C
	.byte	$29
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$03
	.byte	$1C
	.byte	$29
_DATE:
	.byte	$32,$30,$31,$37,$00
_NAME:
	.byte	$4D,$41,$47,$4E,$49,$4E,$00
_SELECT1P:
	.byte	$31,$20,$50,$6C,$61,$79,$65,$72,$00
_SELECT2P:
	.byte	$32,$20,$50,$6C,$61,$79,$65,$72,$00
_SCOREP1:
	.byte	$50,$6C,$61,$79,$65,$72,$20,$31,$20,$3A,$00
_SCOREP2:
	.byte	$50,$6C,$61,$79,$65,$72,$20,$32,$20,$3A,$00
_SCORECMP:
	.byte	$43,$6F,$6D,$70,$75,$74,$65,$72,$20,$3A,$00
_SCORESTRING:
	.byte	$53,$43,$4F,$52,$45,$00
_WINSP1:
	.byte	$50,$6C,$61,$79,$65,$72,$20,$31,$20,$77,$69,$6E,$73,$00
_WINSP2:
	.byte	$50,$6C,$61,$79,$65,$72,$20,$32,$20,$77,$69,$6E,$73,$00
_WINSCMP:
	.byte	$43,$6F,$6D,$70,$75,$74,$65,$72,$20,$77,$69,$6E,$73,$00
_MetaSprite1_Y:
	.byte	$00
	.byte	$08
	.byte	$10
_MetaSprite1_X:
	.byte	$00
	.byte	$00
	.byte	$00
_MetaSprite1_Tile:
	.byte	$02
	.byte	$02
	.byte	$02
_MetaSprite1_Attrib:
	.byte	$02
	.byte	$02
	.byte	$02
_MetaSprite2_Y:
	.byte	$00
	.byte	$08
	.byte	$10
_MetaSprite2_X:
	.byte	$00
	.byte	$00
	.byte	$00
_MetaSprite2_Tile:
	.byte	$11
	.byte	$11
	.byte	$11
_MetaSprite2_Attrib:
	.byte	$02
	.byte	$02
	.byte	$02
_MetaSprite3_Y:
	.byte	$00
_MetaSprite3_X:
	.byte	$00
_MetaSprite3_Tile:
	.byte	$00
_MetaSprite3_Attrib:
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_NMI_flag:
	.res	1,$00
_Frame_Count:
	.res	1,$00
_index:
	.res	1,$00
_index4:
	.res	1,$00
_X1:
	.res	1,$00
_Y1:
	.res	1,$00
_X2:
	.res	1,$00
_Y2:
	.res	1,$00
_XBall:
	.res	1,$00
_YBall:
	.res	1,$00
_speedBallX:
	.res	1,$00
_speedBallY:
	.res	1,$00
_directionBallY:
	.res	1,$00
_directionBallX:
	.res	1,$00
_scoreP1:
	.res	1,$00
_scoreP2CMP:
	.res	1,$00
_speedUpCounter:
	.res	1,$00
_song:
	.res	1,$00
_joypad1:
	.res	1,$00
_joypad1old:
	.res	1,$00
_joypad1test:
	.res	1,$00
_joypad2:
	.res	1,$00
_joypad2old:
	.res	1,$00
_joypad2test:
	.res	1,$00
_new_background:
	.res	1,$00
_textInc:
	.res	1,$00
_textSwitch:
	.res	1,$00
.segment	"OAM"
_SPRITES:
	.res	256,$00

; ---------------------------------------------------------------
; void __near__ All_Off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_Off: near

.segment	"CODE"

;
; PPU_CTRL = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0; 
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ All_On (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_On: near

.segment	"CODE"

;
; PPU_CTRL = 0x90;
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e; 
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Reset_Scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Reset_Scroll: near

.segment	"CODE"

;
; PPU_ADDRESS = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS = 0;
;
	sta     $2006
;
; SCROLL = 0;
;
	sta     $2005
;
; SCROLL = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Background (const unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Background: near

.segment	"CODE"

;
; All_Off();
;
	jsr     _All_Off
;
; PPU_ADDRESS = 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; UnRLE(Map); // on décompresse les données du BKG compréssé en RLE
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _UnRLE
;
; Wait_Vblank();  // on allume pas l'ecran avant le VBLANK
;
	jsr     _Wait_Vblank
;
; All_On();
;
	jsr     _All_On
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ TitleScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_TitleScreen: near

.segment	"CODE"

;
; if(Frame_Count == 10){
;
	lda     _Frame_Count
	cmp     #$0A
	beq     L07B2
;
; }
;
	rts
;
; if(textSwitch == 0 && textInc < sizeof(DATE) - 1){
;
L07B2:	lda     _textSwitch
	bne     L0212
	lda     _textInc
	cmp     #$04
	bcs     L0212
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0x82 + textInc;
;
	lda     _textInc
	clc
	adc     #$82
	sta     $2006
;
; PPU_DATA = DATE[textInc];
;
	ldy     _textInc
	lda     _DATE,y
	sta     $2007
;
; ++textInc;
;
	inc     _textInc
;
; else if(textSwitch == 0 && textInc >= sizeof(DATE) - 1){
;
	jmp     L0225
L0212:	lda     _textSwitch
	bne     L0225
	lda     _textInc
	cmp     #$04
	bcc     L0225
;
; textInc = 0;
;
	lda     #$00
	sta     _textInc
;
; textSwitch = 1;
;
	lda     #$01
	sta     _textSwitch
;
; if(textSwitch == 1 && textInc < sizeof(NAME) - 1){
;
L0225:	lda     _textSwitch
	cmp     #$01
	bne     L022E
	lda     _textInc
	cmp     #$06
	bcs     L022E
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0x98 + textInc;
;
	lda     _textInc
	clc
	adc     #$98
	sta     $2006
;
; PPU_DATA = NAME[textInc];
;
	ldy     _textInc
	lda     _NAME,y
	sta     $2007
;
; ++textInc;
;
	inc     _textInc
;
; else if(textSwitch == 1 && textInc >= sizeof(NAME) - 1){
;
	jmp     L0241
L022E:	lda     _textSwitch
	cmp     #$01
	bne     L0241
	lda     _textInc
	cmp     #$06
	bcc     L0241
;
; textInc = 0;
;
	lda     #$00
	sta     _textInc
;
; textSwitch = 2;
;
	lda     #$02
	sta     _textSwitch
;
; if(textSwitch == 2 && textInc < sizeof(SELECT1P) - 1){
;
L0241:	lda     _textSwitch
	cmp     #$02
	bne     L024A
	lda     _textInc
	cmp     #$08
	bcs     L024A
;
; PPU_ADDRESS = 0x22;
;
	lda     #$22
	sta     $2006
;
; PPU_ADDRESS = 0xad + textInc;
;
	lda     _textInc
	clc
	adc     #$AD
	sta     $2006
;
; PPU_DATA = SELECT1P[textInc];
;
	ldy     _textInc
	lda     _SELECT1P,y
	sta     $2007
;
; ++textInc;
;
	inc     _textInc
;
; else if(textSwitch == 2 && textInc >= sizeof(SELECT1P) - 1){
;
	jmp     L025D
L024A:	lda     _textSwitch
	cmp     #$02
	bne     L025D
	lda     _textInc
	cmp     #$08
	bcc     L025D
;
; textInc = 0;
;
	lda     #$00
	sta     _textInc
;
; textSwitch = 3;
;
	lda     #$03
	sta     _textSwitch
;
; if(textSwitch == 3 && textInc < sizeof(SELECT2P) - 1){
;
L025D:	lda     _textSwitch
	cmp     #$03
	bne     L0266
	lda     _textInc
	cmp     #$08
	bcs     L0266
;
; PPU_ADDRESS = 0x22;
;
	lda     #$22
	sta     $2006
;
; PPU_ADDRESS = 0xed + textInc;
;
	lda     _textInc
	clc
	adc     #$ED
	sta     $2006
;
; PPU_DATA = SELECT2P[textInc];
;
	ldy     _textInc
	lda     _SELECT2P,y
	sta     $2007
;
; ++textInc;
;
	inc     _textInc
;
; else if(textSwitch == 3 && textInc >= sizeof(SELECT2P) - 1){
;
	jmp     L0279
L0266:	lda     _textSwitch
	cmp     #$03
	bne     L0279
	lda     _textInc
	cmp     #$08
	bcc     L0279
;
; textInc = 0;
;
	lda     #$00
	sta     _textInc
;
; textSwitch = 4;
;
	lda     #$04
	sta     _textSwitch
;
; if(textSwitch == 4){
;
L0279:	lda     _textSwitch
	cmp     #$04
	bne     L0282
;
; PPU_ADDRESS = 0x22;
;
	lda     #$22
	sta     $2006
;
; PPU_ADDRESS = 0xab;
;
	lda     #$AB
	sta     $2006
;
; PPU_DATA = 0xFC; //le selecteur et a l'emplacement 0xFC dans le CHR
;
	lda     #$FC
	sta     $2007
;
; textSwitch = 5;
;
	lda     #$05
	sta     _textSwitch
;
; Reset_Scroll();
;
L0282:	jsr     _Reset_Scroll
;
; Frame_Count = 0;
;
	lda     #$00
	sta     _Frame_Count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ SelectMode (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SelectMode: near

.segment	"CODE"

;
; Get_Input();
;
	jsr     _Get_Input
;
; if(((joypad1 & SELECT) != 0) && ((joypad1old & SELECT) == 0)){
;
	lda     _joypad1
	and     #$20
	beq     L0299
	lda     _joypad1old
	and     #$20
	beq     L0295
L0299:	rts
;
; if(textSwitch == 5){
;
L0295:	lda     _textSwitch
	cmp     #$05
	bne     L029E
;
; PPU_ADDRESS = 0x22;
;
	lda     #$22
	sta     $2006
;
; PPU_ADDRESS = 0xeb;
;
	lda     #$EB
	sta     $2006
;
; PPU_DATA = 0xFC; 
;
	lda     #$FC
	sta     $2007
;
; PPU_ADDRESS = 0x22;
;
	lda     #$22
	sta     $2006
;
; PPU_ADDRESS = 0xab;
;
	lda     #$AB
;
; else if(textSwitch == 6){
;
	jmp     L07B5
L029E:	lda     _textSwitch
	cmp     #$06
	bne     L02B3
;
; PPU_ADDRESS = 0x22;
;
	lda     #$22
	sta     $2006
;
; PPU_ADDRESS = 0xab;
;
	lda     #$AB
	sta     $2006
;
; PPU_DATA = 0xFC; 
;
	lda     #$FC
	sta     $2007
;
; PPU_ADDRESS = 0x22;
;
	lda     #$22
	sta     $2006
;
; PPU_ADDRESS = 0xeb;
;
	lda     #$EB
L07B5:	sta     $2006
;
; PPU_DATA = 0x00; 
;
	lda     #$00
	sta     $2007
;
; textSwitch++;
;
L02B3:	lda     _textSwitch
	clc
	adc     #$01
	sta     _textSwitch
;
; if(textSwitch == 7){
;
	cmp     #$07
	jne     _Reset_Scroll
;
; textSwitch = 5;
;
	lda     #$05
	sta     _textSwitch
;
; Reset_Scroll();
;
	jmp     _Reset_Scroll

.endproc

; ---------------------------------------------------------------
; void __near__ update_PaddleSprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_PaddleSprites: near

.segment	"CODE"

;
; index4 = 0;
;
	lda     #$00
	sta     _index4
;
; for (index = 0; index < 3; ++index ){
;
	sta     _index
L02F1:	lda     _index
	cmp     #$03
	bcc     L07BA
;
; }
;
	rts
;
; SPRITES[index4] = MetaSprite1_Y[index] + Y1;
;
L07BA:	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L02FB
	inx
L02FB:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite1_Y,y
	clc
	adc     _Y1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite1_Tile[index]; 
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0302
	inx
L0302:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite1_Tile,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite1_Attrib[index];
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0309
	inx
L0309:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite1_Attrib,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite1_X[index] + X1;
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0310
	inx
L0310:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite1_X,y
	clc
	adc     _X1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite2_Y[index] + Y2;
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0317
	inx
L0317:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite2_Y,y
	clc
	adc     _Y2
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite2_Tile[index]; 
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L031E
	inx
L031E:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite2_Tile,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite2_Attrib[index];
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0325
	inx
L0325:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite2_Attrib,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite2_X[index] + X2;
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L032C
	inx
L032C:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite2_X,y
	clc
	adc     _X2
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; for (index = 0; index < 3; ++index ){
;
	inc     _index
	jmp     L02F1

.endproc

; ---------------------------------------------------------------
; void __near__ update_BallSprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_BallSprites: near

.segment	"CODE"

;
; index4 = 24;
;
	lda     #$18
	sta     _index4
;
; index = 0;
;
	lda     #$00
	sta     _index
;
; SPRITES[index4] = MetaSprite3_Y[index] + YBall;
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0338
	inx
L0338:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite3_Y,y
	clc
	adc     _YBall
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite3_Tile[index]; 
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L033F
	inx
L033F:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite3_Tile,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite3_Attrib[index];
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L0346
	inx
L0346:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite3_Attrib,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITES[index4] = MetaSprite3_X[index] + XBall;
;
	lda     #<(_SPRITES)
	ldx     #>(_SPRITES)
	clc
	adc     _index4
	bcc     L034D
	inx
L034D:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite3_X,y
	clc
	adc     _XBall
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ StartInit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_StartInit: near

.segment	"CODE"

;
; if(((joypad1 & START) != 0) && ((joypad1old & START) == 0) && textSwitch >= 5 && new_background == 1){
;
	lda     _joypad1
	and     #$10
	beq     L0358
	lda     _joypad1old
	and     #$10
	bne     L0358
	lda     _textSwitch
	cmp     #$05
	bcc     L0358
	lda     _new_background
	cmp     #$01
	beq     L0354
L0358:	rts
;
; Play_Fx(0);
;
L0354:	lda     #$00
	jsr     _Play_Fx
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xdb;
;
	lda     #$DB
	sta     $2006
;
; PPU_DATA = 0x00;
;
	lda     #$00
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xdc;
;
	lda     #$DC
	sta     $2006
;
; PPU_DATA = 0x00;
;
	lda     #$00
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xe3;
;
	lda     #$E3
	sta     $2006
;
; PPU_DATA = 0x00;
;
	lda     #$00
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xe4;
;
	lda     #$E4
	sta     $2006
;
; PPU_DATA = 0x00;
;
	lda     #$00
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xea;
;
	lda     #$EA
	sta     $2006
;
; PPU_DATA = 0x00;
;
	lda     #$00
	sta     $2007
;
; Draw_Background(TablePong);
;
	lda     #<(_TablePong)
	ldx     #>(_TablePong)
	jsr     pushax
	jsr     _Draw_Background
;
; PPU_ADDRESS = 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x6d;
;
	lda     #$6D
	sta     $2006
;
; for(index = 0; index < sizeof(SCORESTRING) - 1; ++index){
;
	lda     #$00
	sta     _index
L0394:	lda     _index
	cmp     #$05
	bcs     L0395
;
; PPU_DATA = SCORESTRING[index];
;
	ldy     _index
	lda     _SCORESTRING,y
	sta     $2007
;
; for(index = 0; index < sizeof(SCORESTRING) - 1; ++index){
;
	inc     _index
	jmp     L0394
;
; PPU_ADDRESS = 0x20;
;
L0395:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xa2;
;
	lda     #$A2
	sta     $2006
;
; for(index = 0; index < sizeof(SCOREP1) - 1; ++index){
;
	lda     #$00
	sta     _index
L03A8:	lda     _index
	cmp     #$0A
	bcs     L03A9
;
; PPU_DATA = SCOREP1[index];
;
	ldy     _index
	lda     _SCOREP1,y
	sta     $2007
;
; for(index = 0; index < sizeof(SCOREP1) - 1; ++index){
;
	inc     _index
	jmp     L03A8
;
; PPU_ADDRESS = 0x20;
;
L03A9:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xa2 + 0x0b;
;
	lda     #$AD
	sta     $2006
;
; PPU_DATA = 0x30; //0 dans le CHR
;
	lda     #$30
	sta     $2007
;
; if(textSwitch == 6){
;
	lda     _textSwitch
	cmp     #$06
	bne     L03C8
;
; PPU_ADDRESS = 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xb2;
;
	lda     #$B2
	sta     $2006
;
; for(index = 0; index < sizeof(SCOREP2) - 1; ++index){
;
	lda     #$00
	sta     _index
L03C7:	lda     _index
	cmp     #$0A
	bcs     L03C8
;
; PPU_DATA = SCOREP2[index];
;
	ldy     _index
	lda     _SCOREP2,y
	sta     $2007
;
; for(index = 0; index < sizeof(SCOREP2) - 1; ++index){
;
	inc     _index
	jmp     L03C7
;
; if(textSwitch == 5){
;
L03C8:	lda     _textSwitch
	cmp     #$05
	bne     L03DE
;
; PPU_ADDRESS = 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xb2;
;
	lda     #$B2
	sta     $2006
;
; for(index = 0; index < sizeof(SCORECMP) - 1; ++index){
;
	lda     #$00
	sta     _index
L03DD:	lda     _index
	cmp     #$0A
	bcs     L03DE
;
; PPU_DATA = SCORECMP[index];
;
	ldy     _index
	lda     _SCORECMP,y
	sta     $2007
;
; for(index = 0; index < sizeof(SCORECMP) - 1; ++index){
;
	inc     _index
	jmp     L03DD
;
; PPU_ADDRESS = 0x20;
;
L03DE:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xb2 + 0x0b;
;
	lda     #$BD
	sta     $2006
;
; PPU_DATA = 0x30;
;
	lda     #$30
	sta     $2007
;
; for(index = 0xc8; index <= 0xcf; index++){
;
	lda     #$C8
L07BD:	sta     _index
	cmp     #$D0
	bcs     L03F5
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = index;
;
	lda     _index
	sta     $2006
;
; PPU_DATA = 0xf0;
;
	lda     #$F0
	sta     $2007
;
; for(index = 0xc8; index <= 0xcf; index++){
;
	lda     _index
	clc
	adc     #$01
	jmp     L07BD
;
; PPU_ADDRESS = 0x23;
;
L03F5:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xd0;
;
	lda     #$D0
	sta     $2006
;
; PPU_DATA = 0xff;
;
	lda     #$FF
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xd8;
;
	lda     #$D8
	sta     $2006
;
; PPU_DATA = 0xff;
;
	lda     #$FF
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xe0;
;
	lda     #$E0
	sta     $2006
;
; PPU_DATA = 0xff;
;
	lda     #$FF
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xe8;
;
	lda     #$E8
	sta     $2006
;
; PPU_DATA = 0xff;
;
	lda     #$FF
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xd7;
;
	lda     #$D7
	sta     $2006
;
; PPU_DATA = 0xff;
;
	lda     #$FF
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xdf;
;
	lda     #$DF
	sta     $2006
;
; PPU_DATA = 0xff;
;
	lda     #$FF
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xe7;
;
	lda     #$E7
	sta     $2006
;
; PPU_DATA = 0xff;
;
	lda     #$FF
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xef;
;
	lda     #$EF
	sta     $2006
;
; PPU_DATA = 0xff;
;
	lda     #$FF
	sta     $2007
;
; for(index = 0xf0; index <= 0xf7; index++){
;
	lda     #$F0
L07BE:	sta     _index
	cmp     #$F8
	bcs     L044E
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = index;
;
	lda     _index
	sta     $2006
;
; PPU_DATA = 0xff;
;
	lda     #$FF
	sta     $2007
;
; for(index = 0xf0; index <= 0xf7; index++){
;
	lda     _index
	clc
	adc     #$01
	jmp     L07BE
;
; update_PaddleSprites();
;
L044E:	jsr     _update_PaddleSprites
;
; update_BallSprites();
;
	jsr     _update_BallSprites
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; Play_Music(0);
;
	lda     #$00
	jsr     _Play_Music
;
; new_background = 2;
;
	lda     #$02
	sta     _new_background
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ collisionCheck (int, int, int, int, int, int, int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collisionCheck: near

.segment	"CODE"

;
; if ((x1 < (x2+w2)) && ((x1+w1) > x2) && (y1 < (h2+y2)) && ((y1+h1) > y2)) {
;
	ldy     #$0F
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosaddax
	jsr     tosicmp
	bpl     L0466
	ldy     #$0F
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$0D
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosaddax
	jsr     pushax
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L0466
	beq     L0466
	ldy     #$0D
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosaddax
	jsr     tosicmp
	bpl     L0466
	ldy     #$0D
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosaddax
	jsr     pushax
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	beq     L0466
	bmi     L0466
;
; return 1;
;
	ldx     #$00
	lda     #$01
	jmp     L0473
;
; return 0;
;
L0466:	ldx     #$00
	txa
;
; }
;
L0473:	ldy     #$10
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ speedUpBall (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_speedUpBall: near

.segment	"CODE"

;
; if(speedBallY == 0){
;
	lda     _speedBallY
	bne     L047D
;
; if(directionBallY == 0){
;
	lda     _directionBallY
	bne     L0478
;
; speedBallY = -1;
;
	lda     #$FF
;
; else if(directionBallY == 1){
;
	jmp     L07BF
L0478:	lda     _directionBallY
	cmp     #$01
	bne     L047D
;
; speedBallY = 3;    
;
	lda     #$03
L07BF:	sta     _speedBallY
;
; if(speedUpCounter == 6){
;
L047D:	lda     _speedUpCounter
	cmp     #$06
	bne     L0481
;
; if(directionBallY == 0){
;
	lda     _directionBallY
	bne     L0483
;
; ++speedBallY;
;
	inc     _speedBallY
;
; else{
;
	jmp     L07C0
;
; --speedBallY;
;
L0483:	dec     _speedBallY
;
; if(directionBallX == 0){
;
L07C0:	lda     _directionBallX
	bne     L0488
;
; ++speedBallX;
;
	inc     _speedBallX
;
; else{
;
	jmp     L07C1
;
; --speedBallX;
;
L0488:	dec     _speedBallX
;
; speedUpCounter = 0;
;
L07C1:	lda     #$00
	sta     _speedUpCounter
;
; }
;
L0481:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ movePaddle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movePaddle: near

.segment	"CODE"

;
; Get_Input();
;
	jsr     _Get_Input
;
; if(((joypad1 & UP) != 0) && (Y1 > 0x3e + 0x03)){
;
	lda     _joypad1
	and     #$08
	beq     L0491
	lda     _Y1
	cmp     #$42
	bcc     L0491
;
; Y1 = Y1 - 3;
;
	lda     _Y1
	sec
	sbc     #$03
	bcs     L04A7
;
; else if(((joypad1 & DOWN) != 0) && (Y1 < 0xc6 - 0x11)){
;
	jmp     L04A7
L0491:	lda     _joypad1
	and     #$04
	beq     L049D
	lda     _Y1
	cmp     #$B5
	bcs     L049D
;
; Y1 = Y1 + 3;
;
	lda     _Y1
	clc
	adc     #$03
L04A7:	sta     _Y1
;
; if(textSwitch == 6){
;
L049D:	lda     _textSwitch
	cmp     #$06
	bne     L04A8
;
; Get_Input();
;
	jsr     _Get_Input
;
; if(((joypad2 & UP) != 0) && (Y2 > 0x3e + 0x03)){
;
	lda     _joypad2
	and     #$08
	beq     L04AB
	lda     _Y2
	cmp     #$42
	bcc     L04AB
;
; Y2 = Y2 - 3;
;
	lda     _Y2
	sec
	sbc     #$03
	jcs     L04E4
;
; else if(((joypad2 & DOWN) != 0) && (Y2 < 0xc6 - 0x11)){
;
	jmp     L04E4
L04AB:	lda     _joypad2
	and     #$04
	beq     L04B7
	lda     _Y2
	cmp     #$B5
	bcs     L04B7
;
; Y2 = Y2 + 3;
;
	lda     _Y2
	clc
	adc     #$03
	sta     _Y2
;
; else if(textSwitch == 5){
;
L04B7:	rts
L04A8:	lda     _textSwitch
	cmp     #$05
	bne     L04E1
;
; if ((YBall<Y2 + 12) && (Y2 > 0x3e + 0x03)){
;
	lda     _YBall
	jsr     pusha0
	lda     _Y2
	clc
	adc     #$0C
	bcc     L04C8
	ldx     #$01
L04C8:	jsr     tosicmp
	bcs     L04D1
	lda     _Y2
	cmp     #$42
	bcc     L04D1
;
; if(scoreP1 < 5){
;
	lda     _scoreP1
	cmp     #$05
	bcs     L04CC
;
; Y2 = Y2 - 2;
;
	lda     _Y2
	sec
	sbc     #$02
	bcs     L04D4
;
; else{
;
	jmp     L04D4
;
; Y2 = Y2 - 3;
;
L04CC:	lda     _Y2
	sec
	sbc     #$03
L04D4:	sta     _Y2
;
; if ((YBall>Y2 + 12) && (Y2 < 0xc6 - 0x11)){
;
L04D1:	lda     _YBall
	jsr     pusha0
	lda     _Y2
	clc
	adc     #$0C
	bcc     L04D8
	ldx     #$01
L04D8:	jsr     tosicmp
	bcc     L04D9
	beq     L04D9
	lda     _Y2
	cmp     #$B5
	bcc     L04D6
L04D9:	rts
;
; if(scoreP1 < 5){
;
L04D6:	lda     _scoreP1
	cmp     #$05
	bcs     L04DC
;
; Y2 = Y2 + 2;
;
	lda     _Y2
	clc
	adc     #$02
	bcc     L04E4
;
; else{
;
	jmp     L04E4
;
; Y2 = Y2 + 3;
;
L04DC:	lda     _Y2
	clc
	adc     #$03
L04E4:	sta     _Y2
;
; }
;
L04E1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collBKGandSCORE (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collBKGandSCORE: near

.segment	"CODE"

;
; if(YBall < 0x3e){
;
	lda     _YBall
	cmp     #$3E
	bcs     L04F0
;
; YBall = 0x3e + 1; 
;
	lda     #$3F
	sta     _YBall
;
; speedBallY = speedBallY * -1;
;
	lda     _speedBallY
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallY
;
; if(directionBallY == 1){
;
	lda     _directionBallY
	cmp     #$01
	bne     L04EC
;
; directionBallY = 0;
;
	lda     #$00
	sta     _directionBallY
;
; else{
;
	jmp     L04F0
;
; ++directionBallY;
;
L04EC:	inc     _directionBallY
;
; if(YBall > 0xc6){
;
L04F0:	lda     _YBall
	cmp     #$C7
	bcc     L04FC
;
; YBall = 0xc6 - 1;
;
	lda     #$C5
	sta     _YBall
;
; speedBallY = speedBallY * -1;
;
	lda     _speedBallY
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallY
;
; if(directionBallY == 1){
;
	lda     _directionBallY
	cmp     #$01
	bne     L04F8
;
; directionBallY = 0;
;
	lda     #$00
	sta     _directionBallY
;
; else{
;
	jmp     L04FC
;
; ++directionBallY;
;
L04F8:	inc     _directionBallY
;
; if(XBall < 0x0e){
;
L04FC:	lda     _XBall
	cmp     #$0E
	jcs     L0513
;
; Play_Fx(1);
;
	lda     #$01
	jsr     _Play_Fx
;
; ++scoreP2CMP;
;
	inc     _scoreP2CMP
;
; XBall = 0x7c;
;
	lda     #$7C
	sta     _XBall
;
; YBall = 0x88;
;
	lda     #$88
	sta     _YBall
;
; speedBallX = 1;
;
	lda     #$01
	sta     _speedBallX
;
; speedBallY = 1;
;
	sta     _speedBallY
;
; directionBallY = 0;
;
	lda     #$00
	sta     _directionBallY
;
; directionBallX = 0;
;
	sta     _directionBallX
;
; speedUpCounter = 0;
;
	sta     _speedUpCounter
;
; switch(scoreP2CMP){
;
	lda     _scoreP2CMP
;
; }
;
	cmp     #$01
	beq     L0515
	cmp     #$02
	beq     L0521
	cmp     #$03
	beq     L052D
	cmp     #$04
	beq     L0539
	cmp     #$05
	beq     L0545
	cmp     #$06
	jeq     L0551
	cmp     #$07
	jeq     L055D
	cmp     #$08
	jeq     L0569
	cmp     #$09
	jeq     L0575
	cmp     #$0A
	jeq     L0581
	jmp     L0513
;
; PPU_ADDRESS = 0x20;
;
L0515:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xbd;
;
	lda     #$BD
	sta     $2006
;
; PPU_DATA = 0x31;
;
	lda     #$31
	sta     $2007
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; break;
;
	jmp     L0513
;
; PPU_ADDRESS = 0x20;
;
L0521:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xbd;
;
	lda     #$BD
	sta     $2006
;
; PPU_DATA = 0x32;
;
	lda     #$32
	sta     $2007
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; break;
;
	jmp     L0513
;
; PPU_ADDRESS = 0x20;
;
L052D:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xbd;
;
	lda     #$BD
	sta     $2006
;
; PPU_DATA = 0x33;
;
	lda     #$33
	sta     $2007
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; break;
;
	jmp     L0513
;
; PPU_ADDRESS = 0x20;
;
L0539:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xbd;
;
	lda     #$BD
	sta     $2006
;
; PPU_DATA = 0x34;
;
	lda     #$34
	sta     $2007
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; break;
;
	jmp     L0513
;
; PPU_ADDRESS = 0x20;
;
L0545:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xbd;
;
	lda     #$BD
	sta     $2006
;
; PPU_DATA = 0x35;
;
	lda     #$35
	sta     $2007
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; break;
;
	jmp     L0513
;
; PPU_ADDRESS = 0x20;
;
L0551:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xbd;
;
	lda     #$BD
	sta     $2006
;
; PPU_DATA = 0x36;
;
	lda     #$36
	sta     $2007
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; break;
;
	jmp     L0513
;
; PPU_ADDRESS = 0x20;
;
L055D:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xbd;
;
	lda     #$BD
	sta     $2006
;
; PPU_DATA = 0x37;
;
	lda     #$37
	sta     $2007
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; break;
;
	jmp     L0513
;
; PPU_ADDRESS = 0x20;
;
L0569:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xbd;
;
	lda     #$BD
	sta     $2006
;
; PPU_DATA = 0x38;
;
	lda     #$38
	sta     $2007
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; break;
;
	jmp     L0513
;
; PPU_ADDRESS = 0x20;
;
L0575:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xbd;
;
	lda     #$BD
	sta     $2006
;
; PPU_DATA = 0x39;
;
	lda     #$39
	sta     $2007
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; break;
;
	jmp     L0513
;
; SPRITES[1] = 0xff;
;
L0581:	lda     #$FF
	sta     _SPRITES+1
;
; SPRITES[5] = 0xff;
;
	sta     _SPRITES+5
;
; SPRITES[9] = 0xff;
;
	sta     _SPRITES+9
;
; SPRITES[13] = 0xff;
;
	sta     _SPRITES+13
;
; SPRITES[17] = 0xff;
;
	sta     _SPRITES+17
;
; SPRITES[21] = 0xff;
;
	sta     _SPRITES+21
;
; SPRITES[25] = 0xff;
;
	sta     _SPRITES+25
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; Play_Fx(4);
;
	lda     #$04
	jsr     _Play_Fx
;
; Draw_Background(BlackScreen);
;
	lda     #<(_BlackScreen)
	ldx     #>(_BlackScreen)
	jsr     pushax
	jsr     _Draw_Background
;
; new_background = 3;
;
	lda     #$03
	sta     _new_background
;
; if(XBall > 0xeb){
;
L0513:	lda     _XBall
	cmp     #$EC
	bcs     L07C2
;
; }
;
	rts
;
; Play_Fx(1);
;
L07C2:	lda     #$01
	jsr     _Play_Fx
;
; ++scoreP1;
;
	inc     _scoreP1
;
; XBall = 0x7c;
;
	lda     #$7C
	sta     _XBall
;
; YBall = 0x88;
;
	lda     #$88
	sta     _YBall
;
; speedBallX = 1;
;
	lda     #$01
	sta     _speedBallX
;
; speedBallY = 1;
;
	sta     _speedBallY
;
; directionBallY = 0;
;
	lda     #$00
	sta     _directionBallY
;
; directionBallX = 0;
;
	sta     _directionBallX
;
; speedUpCounter = 0;
;
	sta     _speedUpCounter
;
; All_Off();
;
	jsr     _All_Off
;
; switch(scoreP1){
;
	lda     _scoreP1
;
; }
;
	cmp     #$01
	beq     L05B6
	cmp     #$02
	beq     L05C1
	cmp     #$03
	beq     L05CC
	cmp     #$04
	beq     L05D7
	cmp     #$05
	beq     L05E2
	cmp     #$06
	beq     L05ED
	cmp     #$07
	jeq     L05F8
	cmp     #$08
	jeq     L0603
	cmp     #$09
	jeq     L060E
	cmp     #$0A
	jeq     L0619
	jmp     L05B4
;
; PPU_ADDRESS = 0x20;
;
L05B6:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xad;
;
	lda     #$AD
	sta     $2006
;
; PPU_DATA = 0x31;
;
	lda     #$31
	sta     $2007
;
; break;
;
	jmp     L05B4
;
; PPU_ADDRESS = 0x20;
;
L05C1:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xad;
;
	lda     #$AD
	sta     $2006
;
; PPU_DATA = 0x32;
;
	lda     #$32
	sta     $2007
;
; break;
;
	jmp     L05B4
;
; PPU_ADDRESS = 0x20;
;
L05CC:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xad;
;
	lda     #$AD
	sta     $2006
;
; PPU_DATA = 0x33;
;
	lda     #$33
	sta     $2007
;
; break;
;
	jmp     L05B4
;
; PPU_ADDRESS = 0x20;
;
L05D7:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xad;
;
	lda     #$AD
	sta     $2006
;
; PPU_DATA = 0x34;
;
	lda     #$34
	sta     $2007
;
; break;
;
	jmp     L05B4
;
; PPU_ADDRESS = 0x20;
;
L05E2:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xad;
;
	lda     #$AD
	sta     $2006
;
; PPU_DATA = 0x35;
;
	lda     #$35
	sta     $2007
;
; break;
;
	jmp     L05B4
;
; PPU_ADDRESS = 0x20;
;
L05ED:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xad;
;
	lda     #$AD
	sta     $2006
;
; PPU_DATA = 0x36;
;
	lda     #$36
	sta     $2007
;
; break;
;
	jmp     L05B4
;
; PPU_ADDRESS = 0x20;
;
L05F8:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xad;
;
	lda     #$AD
	sta     $2006
;
; PPU_DATA = 0x37;
;
	lda     #$37
	sta     $2007
;
; break;
;
	jmp     L05B4
;
; PPU_ADDRESS = 0x20;
;
L0603:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xad;
;
	lda     #$AD
	sta     $2006
;
; PPU_DATA = 0x38;
;
	lda     #$38
	sta     $2007
;
; break;
;
	jmp     L05B4
;
; PPU_ADDRESS = 0x20;
;
L060E:	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0xad;
;
	lda     #$AD
	sta     $2006
;
; PPU_DATA = 0x39;
;
	lda     #$39
	sta     $2007
;
; break;
;
	jmp     L05B4
;
; SPRITES[1] = 0xff;
;
L0619:	lda     #$FF
	sta     _SPRITES+1
;
; SPRITES[5] = 0xff;
;
	sta     _SPRITES+5
;
; SPRITES[9] = 0xff;
;
	sta     _SPRITES+9
;
; SPRITES[13] = 0xff;
;
	sta     _SPRITES+13
;
; SPRITES[17] = 0xff;
;
	sta     _SPRITES+17
;
; SPRITES[21] = 0xff;
;
	sta     _SPRITES+21
;
; SPRITES[25] = 0xff;
;
	sta     _SPRITES+25
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; Play_Fx(4);
;
	lda     #$04
	jsr     _Play_Fx
;
; Draw_Background(BlackScreen);
;
	lda     #<(_BlackScreen)
	ldx     #>(_BlackScreen)
	jsr     pushax
	jsr     _Draw_Background
;
; new_background = 3;
;
	lda     #$03
	sta     _new_background
;
; Reset_Scroll();
;
L05B4:	jsr     _Reset_Scroll
;
; All_On();
;
	jmp     _All_On

.endproc

; ---------------------------------------------------------------
; void __near__ collSPRITES (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collSPRITES: near

.segment	"CODE"

;
; if(collisionCheck(XBall-2, YBall, 0x08, 0x08, X1, Y1, 0x08, 0x08)){
;
	ldy     #$10
	jsr     subysp
	ldx     #$00
	lda     _XBall
	sec
	sbc     #$02
	bcs     L063C
	dex
L063C:	ldy     #$0E
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _YBall
	ldy     #$0C
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	ldy     #$0A
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	tay
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _X1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _Y1
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _collisionCheck
	stx     tmp1
	ora     tmp1
	jeq     L0639
;
; Play_Fx(3);
;
	lda     #$03
	jsr     _Play_Fx
;
; if(YBall <= Y1 - (8/2)){
;
	lda     _YBall
	jsr     pusha0
	lda     _Y1
	sec
	sbc     #$04
	bcs     L0649
	ldx     #$FF
L0649:	jsr     tosicmp
	beq     L07CC
	bcs     L0646
;
; YBall = Y1 - 9;
;
L07CC:	lda     _Y1
	sec
	sbc     #$09
	sta     _YBall
;
; speedBallY = speedBallY * -1;
;
	lda     _speedBallY
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallY
;
; if(directionBallY == 0 ){
;
L0646:	lda     _directionBallY
	bne     L064F
;
; speedBallX = speedBallX * -1;
;
	lda     _speedBallX
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallX
;
; if(directionBallX == 1){
;
	lda     _directionBallX
	cmp     #$01
	jne     L0733
;
; directionBallX = 0;
;
	lda     #$00
	sta     _directionBallX
;
; else{
;
	jmp     L0737
;
; speedBallY = speedBallY * -1;
;
L064F:	lda     _speedBallY
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallY
;
; speedBallX = speedBallX * -1;
;
	lda     _speedBallX
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallX
;
; if(directionBallY == 1){
;
	lda     _directionBallY
	cmp     #$01
	bne     L065E
;
; directionBallY = 0;
;
	lda     #$00
	sta     _directionBallY
;
; else{
;
	jmp     L0662
;
; ++directionBallY;
;
L065E:	inc     _directionBallY
;
; if(directionBallX == 1){
;
L0662:	lda     _directionBallX
	cmp     #$01
	jne     L0733
;
; directionBallX = 0;
;
	lda     #$00
	sta     _directionBallX
;
; else{
;
	jmp     L0737
;
; else if(collisionCheck(XBall-2, YBall, 0x08, 0x08, X1, Y1+0x08, 0x08, 0x08)){
;
L0639:	ldy     #$10
	jsr     subysp
	ldx     #$00
	lda     _XBall
	sec
	sbc     #$02
	bcs     L066F
	dex
L066F:	ldy     #$0E
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _YBall
	ldy     #$0C
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	ldy     #$0A
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	tay
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _X1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tax
	lda     _Y1
	clc
	adc     #$08
	bcc     L0675
	inx
L0675:	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$08
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _collisionCheck
	stx     tmp1
	ora     tmp1
	beq     L066C
;
; Play_Fx(3);
;
	lda     #$03
	jsr     _Play_Fx
;
; speedBallX = speedBallX * -1;
;
	lda     _speedBallX
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallX
;
; if(directionBallX == 1){
;
	lda     _directionBallX
	cmp     #$01
	jne     L0733
;
; directionBallX = 0;
;
	lda     #$00
	sta     _directionBallX
;
; else{
;
	jmp     L0737
;
; else if(collisionCheck(XBall-2, YBall, 0x08, 0x08, X1, Y1+0x0f, 0x08, 0x08)){
;
L066C:	ldy     #$10
	jsr     subysp
	ldx     #$00
	lda     _XBall
	sec
	sbc     #$02
	bcs     L0687
	dex
L0687:	ldy     #$0E
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _YBall
	ldy     #$0C
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	ldy     #$0A
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	tay
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _X1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tax
	lda     _Y1
	clc
	adc     #$0F
	bcc     L068D
	inx
L068D:	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$08
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _collisionCheck
	stx     tmp1
	ora     tmp1
	jeq     L0684
;
; Play_Fx(3);
;
	lda     #$03
	jsr     _Play_Fx
;
; if(YBall >= Y1+ 0x0f + (8/2)){
;
	lda     _YBall
	jsr     pusha0
	lda     _Y1
	clc
	adc     #$0F
	bcc     L07C8
	ldx     #$01
	clc
L07C8:	adc     #$04
	bcc     L0696
	inx
L0696:	jsr     tosicmp
	bcc     L0692
;
; YBall = Y1 + 0x0f + 9;
;
	lda     _Y1
	clc
	adc     #$0F
	bcc     L07C9
	clc
L07C9:	adc     #$09
	sta     _YBall
;
; speedBallY = speedBallY * -1;
;
	lda     _speedBallY
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallY
;
; if(directionBallY == 1){
;
L0692:	lda     _directionBallY
	cmp     #$01
	bne     L069D
;
; speedBallX = speedBallX * -1;
;
	lda     _speedBallX
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallX
;
; if(directionBallX == 1){
;
	lda     _directionBallX
	cmp     #$01
	jne     L0733
;
; directionBallX = 0;
;
	lda     #$00
	sta     _directionBallX
;
; else{
;
	jmp     L0737
;
; speedBallY = speedBallY * -1;
;
L069D:	lda     _speedBallY
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallY
;
; speedBallX = speedBallX * -1;
;
	lda     _speedBallX
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallX
;
; if(directionBallY == 1){
;
	lda     _directionBallY
	cmp     #$01
	bne     L06AC
;
; directionBallY = 0;
;
	lda     #$00
	sta     _directionBallY
;
; else{
;
	jmp     L06B0
;
; ++directionBallY;
;
L06AC:	inc     _directionBallY
;
; if(directionBallX == 1){
;
L06B0:	lda     _directionBallX
	cmp     #$01
	jne     L0733
;
; directionBallX = 0;
;
	lda     #$00
	sta     _directionBallX
;
; else{
;
	jmp     L0737
;
; else if(collisionCheck(XBall-2, YBall, 0x08, 0x08, X2, Y2, 0x08, 0x08)){
;
L0684:	ldy     #$10
	jsr     subysp
	ldx     #$00
	lda     _XBall
	sec
	sbc     #$02
	bcs     L06BD
	dex
L06BD:	ldy     #$0E
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _YBall
	ldy     #$0C
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	ldy     #$0A
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	tay
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _X2
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _Y2
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _collisionCheck
	stx     tmp1
	ora     tmp1
	jeq     L06BA
;
; Play_Fx(3);
;
	lda     #$03
	jsr     _Play_Fx
;
; if(YBall <= Y2 - (8/2)){
;
	lda     _YBall
	jsr     pusha0
	lda     _Y2
	sec
	sbc     #$04
	bcs     L06CA
	ldx     #$FF
L06CA:	jsr     tosicmp
	beq     L07CD
	bcs     L06C7
;
; YBall = Y2 - 9;
;
L07CD:	lda     _Y2
	sec
	sbc     #$09
	sta     _YBall
;
; speedBallY = speedBallY * -1;
;
	lda     _speedBallY
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallY
;
; if(directionBallY == 0){
;
L06C7:	lda     _directionBallY
	bne     L06D0
;
; speedBallX = speedBallX * -1;
;
	lda     _speedBallX
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallX
;
; if(directionBallX == 1){
;
	lda     _directionBallX
	cmp     #$01
	jne     L0733
;
; directionBallX = 0;
;
	lda     #$00
	sta     _directionBallX
;
; else{
;
	jmp     L0737
;
; speedBallY = speedBallY * -1;
;
L06D0:	lda     _speedBallY
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallY
;
; speedBallX = speedBallX * -1;
;
	lda     _speedBallX
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallX
;
; if(directionBallY == 1){
;
	lda     _directionBallY
	cmp     #$01
	bne     L06DF
;
; directionBallY = 0;
;
	lda     #$00
	sta     _directionBallY
;
; else{
;
	jmp     L06E3
;
; ++directionBallY;
;
L06DF:	inc     _directionBallY
;
; if(directionBallX == 1){
;
L06E3:	lda     _directionBallX
	cmp     #$01
	jne     L0733
;
; directionBallX = 0;
;
	lda     #$00
	sta     _directionBallX
;
; else{
;
	jmp     L0737
;
; else if(collisionCheck(XBall-2, YBall, 0x08, 0x08, X2, Y2+0x08, 0x08, 0x08)){
;
L06BA:	ldy     #$10
	jsr     subysp
	ldx     #$00
	lda     _XBall
	sec
	sbc     #$02
	bcs     L06F0
	dex
L06F0:	ldy     #$0E
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _YBall
	ldy     #$0C
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	ldy     #$0A
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	tay
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _X2
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tax
	lda     _Y2
	clc
	adc     #$08
	bcc     L06F6
	inx
L06F6:	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$08
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _collisionCheck
	stx     tmp1
	ora     tmp1
	beq     L06ED
;
; Play_Fx(3);
;
	lda     #$03
	jsr     _Play_Fx
;
; speedBallX = speedBallX * -1;
;
	lda     _speedBallX
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallX
;
; if(directionBallX == 1){
;
	lda     _directionBallX
	cmp     #$01
	jne     L0733
;
; directionBallX = 0;
;
	lda     #$00
	sta     _directionBallX
;
; else{
;
	jmp     L0737
;
; else if(collisionCheck(XBall-2, YBall, 0x08, 0x08, X2, Y2+0x0f, 0x08, 0x08)){
;
L06ED:	ldy     #$10
	jsr     subysp
	ldx     #$00
	lda     _XBall
	sec
	sbc     #$02
	bcs     L0708
	dex
L0708:	ldy     #$0E
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _YBall
	ldy     #$0C
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	ldy     #$0A
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	tay
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _X2
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tax
	lda     _Y2
	clc
	adc     #$0F
	bcc     L070E
	inx
L070E:	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$08
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _collisionCheck
	stx     tmp1
	ora     tmp1
	bne     L07CE
;
; }
;
	rts
;
; Play_Fx(3);
;
L07CE:	lda     #$03
	jsr     _Play_Fx
;
; if(YBall >= Y2+ 0x0f + (8/2)){
;
	lda     _YBall
	jsr     pusha0
	lda     _Y2
	clc
	adc     #$0F
	bcc     L07CA
	ldx     #$01
	clc
L07CA:	adc     #$04
	bcc     L0717
	inx
L0717:	jsr     tosicmp
	bcc     L0713
;
; YBall = Y2 + 0x0f + 9;
;
	lda     _Y2
	clc
	adc     #$0F
	bcc     L07CB
	clc
L07CB:	adc     #$09
	sta     _YBall
;
; speedBallY = speedBallY * -1;
;
	lda     _speedBallY
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallY
;
; if(directionBallY == 1){
;
L0713:	lda     _directionBallY
	cmp     #$01
	bne     L071E
;
; speedBallX = speedBallX * -1;
;
	lda     _speedBallX
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallX
;
; if(directionBallX == 1){
;
	lda     _directionBallX
	cmp     #$01
	bne     L0733
;
; directionBallX = 0;
;
	lda     #$00
	sta     _directionBallX
;
; else{
;
	jmp     L0737
;
; speedBallY = speedBallY * -1;
;
L071E:	lda     _speedBallY
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallY
;
; speedBallX = speedBallX * -1;
;
	lda     _speedBallX
	jsr     pusha0
	ldx     #$FF
	txa
	jsr     tosumulax
	sta     _speedBallX
;
; if(directionBallY == 1){
;
	lda     _directionBallY
	cmp     #$01
	bne     L072D
;
; directionBallY = 0;
;
	lda     #$00
	sta     _directionBallY
;
; else{
;
	jmp     L0731
;
; ++directionBallY;
;
L072D:	inc     _directionBallY
;
; if(directionBallX == 1){
;
L0731:	lda     _directionBallX
	cmp     #$01
	bne     L0733
;
; directionBallX = 0;
;
	lda     #$00
	sta     _directionBallX
;
; else{
;
	jmp     L0737
;
; ++directionBallX;
;
L0733:	inc     _directionBallX
;
; ++speedUpCounter;
;
L0737:	inc     _speedUpCounter
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ initGAME (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initGAME: near

.segment	"CODE"

;
; All_Off();
;
	jsr     _All_Off
;
; X1 = 0x18;
;
	lda     #$18
	sta     _X1
;
; Y1 = 0x80;
;
	lda     #$80
	sta     _Y1
;
; X2 =  0xe2;
;
	lda     #$E2
	sta     _X2
;
; Y2 = 0x80;
;
	lda     #$80
	sta     _Y2
;
; XBall = 0x7c;
;
	lda     #$7C
	sta     _XBall
;
; YBall = 0x88;
;
	lda     #$88
	sta     _YBall
;
; speedBallX = 1;
;
	lda     #$01
	sta     _speedBallX
;
; speedBallY = 1;
;
	sta     _speedBallY
;
; directionBallY = 0;
;
	lda     #$00
	sta     _directionBallY
;
; directionBallX = 0;
;
	sta     _directionBallX
;
; speedUpCounter = 0;
;
	sta     _speedUpCounter
;
; textSwitch = 0;
;
	sta     _textSwitch
;
; textInc = 0;
;
	sta     _textInc
;
; scoreP1 = 0;
;
	sta     _scoreP1
;
; scoreP2CMP = 0;
;
	sta     _scoreP2CMP
;
; song = 0;
;
	sta     _song
;
; new_background = 0;
;
	sta     _new_background
;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; for( index = 0; index < sizeof(PaletteTitleScreen); ++index ){
;
	sta     _index
L0764:	lda     _index
	cmp     #$20
	bcs     L0765
;
; PPU_DATA = PaletteTitleScreen[index];
;
	ldy     _index
	lda     _PaletteTitleScreen,y
	sta     $2007
;
; for( index = 0; index < sizeof(PaletteTitleScreen); ++index ){
;
	inc     _index
	jmp     L0764
;
; for(index = 0xc0; index <= 0xfe; index++){
;
L0765:	lda     #$C0
L07CF:	sta     _index
	cmp     #$FF
	bcs     L0773
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = index;
;
	lda     _index
	sta     $2006
;
; PPU_DATA = 0x00;
;
	lda     #$00
	sta     $2007
;
; for(index = 0xc0; index <= 0xfe; index++){
;
	lda     _index
	clc
	adc     #$01
	jmp     L07CF
;
; PPU_ADDRESS = 0x23;
;
L0773:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xdb;
;
	lda     #$DB
	sta     $2006
;
; PPU_DATA = 0xA0;
;
	lda     #$A0
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xdc;
;
	lda     #$DC
	sta     $2006
;
; PPU_DATA = 0xA0;
;
	lda     #$A0
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xe3;
;
	lda     #$E3
	sta     $2006
;
; PPU_DATA = 0x0A;
;
	lda     #$0A
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xe4;
;
	lda     #$E4
	sta     $2006
;
; PPU_DATA = 0x0A;
;
	lda     #$0A
	sta     $2007
;
; PPU_ADDRESS = 0x23;
;
	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xea;
;
	lda     #$EA
	sta     $2006
;
; PPU_DATA = 0xAA;
;
	lda     #$AA
	sta     $2007
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; All_On();
;
	jmp     _All_On

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; initGAME();
;
	jsr     _initGAME
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; while (NMI_flag == 0); // Attendre interuption NMI
;
L0182:	lda     _NMI_flag
	beq     L0182
;
; if(new_background == 0){
;
	lda     _new_background
	bne     L0188
;
; Draw_Background(MapTitleScreen);
;
	lda     #<(_MapTitleScreen)
	ldx     #>(_MapTitleScreen)
	jsr     pushax
	jsr     _Draw_Background
;
; Play_Fx(2);
;
	lda     #$02
	jsr     _Play_Fx
;
; new_background = 1;
;
	lda     #$01
	sta     _new_background
;
; if(new_background == 1){
;
L0188:	lda     _new_background
	cmp     #$01
	bne     L0190
;
; TitleScreen();
;
	jsr     _TitleScreen
;
; SelectMode();
;
	jsr     _SelectMode
;
; StartInit();
;
	jsr     _StartInit
;
; if(new_background == 2){
;
L0190:	lda     _new_background
	cmp     #$02
	bne     L019A
;
; speedUpBall();
;
	jsr     _speedUpBall
;
; movePaddle();
;
	jsr     _movePaddle
;
; collBKGandSCORE();
;
	jsr     _collBKGandSCORE
;
; if(new_background != 3){
;
	lda     _new_background
	cmp     #$03
	beq     L019A
;
; collSPRITES();
;
	jsr     _collSPRITES
;
; XBall = XBall + speedBallX;
;
	lda     _XBall
	clc
	adc     _speedBallX
	sta     _XBall
;
; YBall = YBall + speedBallY;
;
	lda     _YBall
	clc
	adc     _speedBallY
	sta     _YBall
;
; update_PaddleSprites();
;
	jsr     _update_PaddleSprites
;
; update_BallSprites();
;
	jsr     _update_BallSprites
;
; if(new_background == 3){
;
L019A:	lda     _new_background
	cmp     #$03
	jne     L01A3
;
; if(scoreP1 == 10){
;
	lda     _scoreP1
	cmp     #$0A
	bne     L01A5
;
; PPU_ADDRESS = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xca;
;
	lda     #$CA
	sta     $2006
;
; for(index = 0; index < sizeof(WINSP1) - 1; ++index){
;
	lda     #$00
	sta     _index
L01AD:	lda     _index
	cmp     #$0D
	bcs     L01AE
;
; PPU_DATA = WINSP1[index];
;
	ldy     _index
	lda     _WINSP1,y
	sta     $2007
;
; for(index = 0; index < sizeof(WINSP1) - 1; ++index){
;
	inc     _index
	jmp     L01AD
;
; scoreP1 = 11;
;
L01AE:	lda     #$0B
	sta     _scoreP1
;
; else if(scoreP2CMP == 10 && textSwitch == 5){
;
	jmp     L01D9
L01A5:	lda     _scoreP2CMP
	cmp     #$0A
	bne     L01BE
	lda     _textSwitch
	cmp     #$05
	bne     L01BE
;
; PPU_ADDRESS = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xca;
;
	lda     #$CA
	sta     $2006
;
; for(index = 0; index < sizeof(WINSCMP) - 1; ++index){
;
	lda     #$00
	sta     _index
L01C8:	lda     _index
	cmp     #$0D
	bcs     L01E4
;
; PPU_DATA = WINSCMP[index];
;
	ldy     _index
	lda     _WINSCMP,y
	sta     $2007
;
; for(index = 0; index < sizeof(WINSCMP) - 1; ++index){
;
	inc     _index
	jmp     L01C8
;
; else if(scoreP2CMP == 10 && textSwitch == 6){
;
L01BE:	lda     _scoreP2CMP
	cmp     #$0A
	bne     L01D9
	lda     _textSwitch
	cmp     #$06
	bne     L01D9
;
; PPU_ADDRESS = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xca;
;
	lda     #$CA
	sta     $2006
;
; for(index = 0; index < sizeof(WINSP2) - 1; ++index){
;
	lda     #$00
	sta     _index
L01E3:	lda     _index
	cmp     #$0D
	bcs     L01E4
;
; PPU_DATA = WINSP2[index];
;
	ldy     _index
	lda     _WINSP2,y
	sta     $2007
;
; for(index = 0; index < sizeof(WINSP2) - 1; ++index){
;
	inc     _index
	jmp     L01E3
;
; scoreP2CMP = 11;
;
L01E4:	lda     #$0B
	sta     _scoreP2CMP
;
; Reset_Scroll();
;
L01D9:	jsr     _Reset_Scroll
;
; new_background = 4;
;
	lda     #$04
	sta     _new_background
;
; Frame_Count = 0;
;
	lda     #$00
	sta     _Frame_Count
;
; if(new_background == 4 && Frame_Count == 240){
;
L01A3:	lda     _new_background
	cmp     #$04
	bne     L01F8
	lda     _Frame_Count
	cmp     #$F0
	bne     L01F8
;
; initGAME();
;
	jsr     _initGAME
;
; Draw_Background(MapTitleScreen);
;
	lda     #<(_MapTitleScreen)
	ldx     #>(_MapTitleScreen)
	jsr     pushax
	jsr     _Draw_Background
;
; TitleScreen();
;
	jsr     _TitleScreen
;
; SelectMode();
;
	jsr     _SelectMode
;
; StartInit();
;
	jsr     _StartInit
;
; new_background == 2;
;
	lda     _new_background
	cmp     #$02
	jsr     booleq
;
; Frame_Count = 0;
;
	stx     _Frame_Count
;
; Music_Update();
;
L01F8:	jsr     _Music_Update
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; }
;
	jmp     L0182

.endproc

